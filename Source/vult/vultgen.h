
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef VULTGEN_H
#define VULTGEN_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "vultgen.tables.h"

typedef struct Selfplay__ctx_type_0 {
   float pre_x;
} Selfplay__ctx_type_0;

typedef Selfplay__ctx_type_0 Selfplay_change_type;

static_inline void Selfplay__ctx_type_0_init(Selfplay__ctx_type_0 &_output_){
   Selfplay__ctx_type_0 _ctx;
   _ctx.pre_x = 0.0f;
   _output_ = _ctx;
   return ;
}

static_inline void Selfplay_change_init(Selfplay__ctx_type_0 &_output_){
   Selfplay__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t Selfplay_change(Selfplay__ctx_type_0 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

typedef struct Selfplay__ctx_type_1 {
   uint8_t pre;
} Selfplay__ctx_type_1;

typedef Selfplay__ctx_type_1 Selfplay_edge_type;

static_inline void Selfplay__ctx_type_1_init(Selfplay__ctx_type_1 &_output_){
   Selfplay__ctx_type_1 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void Selfplay_edge_init(Selfplay__ctx_type_1 &_output_){
   Selfplay__ctx_type_1_init(_output_);
   return ;
}

static_inline uint8_t Selfplay_edge(Selfplay__ctx_type_1 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

typedef struct Selfplay__ctx_type_2 {
   float x;
} Selfplay__ctx_type_2;

typedef Selfplay__ctx_type_2 Selfplay_smooth_type;

static_inline void Selfplay__ctx_type_2_init(Selfplay__ctx_type_2 &_output_){
   Selfplay__ctx_type_2 _ctx;
   _ctx.x = 0.0f;
   _output_ = _ctx;
   return ;
}

static_inline void Selfplay_smooth_init(Selfplay__ctx_type_2 &_output_){
   Selfplay__ctx_type_2_init(_output_);
   return ;
}

static_inline float Selfplay_smooth(Selfplay__ctx_type_2 &_ctx, float input){
   _ctx.x = (_ctx.x + (0.005f * (input + (- _ctx.x))));
   return _ctx.x;
}

static_inline float Selfplay_pitchToRate_raw_c0(int index){
   return Selfplay_pitchToRate_c0[index];
};

static_inline float Selfplay_pitchToRate_raw_c1(int index){
   return Selfplay_pitchToRate_c1[index];
};

static_inline float Selfplay_pitchToRate_raw_c2(int index){
   return Selfplay_pitchToRate_c2[index];
};

static_inline float Selfplay_pitchToRate(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094488189f * pitch)),0,31);
   return (float_wrap_array(Selfplay_pitchToRate_c0)[index] + (pitch * (float_wrap_array(Selfplay_pitchToRate_c1)[index] + (pitch * float_wrap_array(Selfplay_pitchToRate_c2)[index]))));
}

static_inline float Selfplay_cvToPitch(float cv){
   return (24.f + (120.f * cv));
};

static_inline float Selfplay_cvToRate_raw_c0(int index){
   return Selfplay_cvToRate_c0[index];
};

static_inline float Selfplay_cvToRate_raw_c1(int index){
   return Selfplay_cvToRate_c1[index];
};

static_inline float Selfplay_cvToRate_raw_c2(int index){
   return Selfplay_cvToRate_c2[index];
};

static_inline float Selfplay_cvToRate(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Selfplay_cvToRate_c0)[index] + (cv * (float_wrap_array(Selfplay_cvToRate_c1)[index] + (cv * float_wrap_array(Selfplay_cvToRate_c2)[index]))));
}

static_inline float Selfplay_wave_raw_c0(int index){
   return Selfplay_wave_c0[index];
};

static_inline float Selfplay_wave_raw_c1(int index){
   return Selfplay_wave_c1[index];
};

static_inline float Selfplay_wave_raw_c2(int index){
   return Selfplay_wave_c2[index];
};

static_inline float Selfplay_wave(float phase){
   int index;
   index = int_clip(float_to_int((127.f * phase)),0,127);
   return (float_wrap_array(Selfplay_wave_c0)[index] + (phase * (float_wrap_array(Selfplay_wave_c1)[index] + (phase * float_wrap_array(Selfplay_wave_c2)[index]))));
}

typedef struct Selfplay__ctx_type_16 {
   float rate;
   float phase;
   Selfplay__ctx_type_0 _inst11a;
} Selfplay__ctx_type_16;

typedef Selfplay__ctx_type_16 Selfplay_phase_type;

void Selfplay__ctx_type_16_init(Selfplay__ctx_type_16 &_output_);

static_inline void Selfplay_phase_init(Selfplay__ctx_type_16 &_output_){
   Selfplay__ctx_type_16_init(_output_);
   return ;
}

float Selfplay_phase(Selfplay__ctx_type_16 &_ctx, float cv);

typedef Selfplay__ctx_type_16 Selfplay_phase_start_type;

static_inline void Selfplay_phase_start_init(Selfplay__ctx_type_16 &_output_){
   Selfplay__ctx_type_16_init(_output_);
   return ;
}

static_inline void Selfplay_phase_start(Selfplay__ctx_type_16 &_ctx){
   _ctx.rate = 0.000741569062643f;
};

typedef struct Selfplay__ctx_type_17 {
   float rate;
   float phase;
   Selfplay__ctx_type_0 _inst11a;
} Selfplay__ctx_type_17;

typedef Selfplay__ctx_type_17 Selfplay_lfo_type;

void Selfplay__ctx_type_17_init(Selfplay__ctx_type_17 &_output_);

static_inline void Selfplay_lfo_init(Selfplay__ctx_type_17 &_output_){
   Selfplay__ctx_type_17_init(_output_);
   return ;
}

float Selfplay_lfo(Selfplay__ctx_type_17 &_ctx, float cv);

typedef struct Selfplay__ctx_type_18 {
   Selfplay__ctx_type_16 _inst14d;
} Selfplay__ctx_type_18;

typedef Selfplay__ctx_type_18 Selfplay_osc_type;

static_inline void Selfplay__ctx_type_18_init(Selfplay__ctx_type_18 &_output_){
   Selfplay__ctx_type_18 _ctx;
   Selfplay__ctx_type_16_init(_ctx._inst14d);
   _output_ = _ctx;
   return ;
}

static_inline void Selfplay_osc_init(Selfplay__ctx_type_18 &_output_){
   Selfplay__ctx_type_18_init(_output_);
   return ;
}

static_inline float Selfplay_osc(Selfplay__ctx_type_18 &_ctx, float cv){
   return Selfplay_wave(Selfplay_phase(_ctx._inst14d,cv));
};

typedef struct Selfplay__ctx_type_19 {
   float out;
   Selfplay__ctx_type_2 _inst364;
   Selfplay__ctx_type_1 _inst132;
} Selfplay__ctx_type_19;

typedef Selfplay__ctx_type_19 Selfplay_shnoise_type;

void Selfplay__ctx_type_19_init(Selfplay__ctx_type_19 &_output_);

static_inline void Selfplay_shnoise_init(Selfplay__ctx_type_19 &_output_){
   Selfplay__ctx_type_19_init(_output_);
   return ;
}

static_inline float Selfplay_shnoise(Selfplay__ctx_type_19 &_ctx, float phase){
   if(Selfplay_edge(_ctx._inst132,(phase > 0.5f))){
      _ctx.out = float_random();
   }
   return Selfplay_smooth(_ctx._inst364,_ctx.out);
}

typedef struct Selfplay__ctx_type_20 {
   float out;
   Selfplay__ctx_type_2 _inst164;
} Selfplay__ctx_type_20;

typedef Selfplay__ctx_type_20 Selfplay_pulse_type;

void Selfplay__ctx_type_20_init(Selfplay__ctx_type_20 &_output_);

static_inline void Selfplay_pulse_init(Selfplay__ctx_type_20 &_output_){
   Selfplay__ctx_type_20_init(_output_);
   return ;
}

static_inline float Selfplay_pulse(Selfplay__ctx_type_20 &_ctx, float phase){
   if(phase > 0.5f){
      _ctx.out = 1.f;
   }
   else
   {
      _ctx.out = 0.0f;
   }
   return Selfplay_smooth(_ctx._inst164,_ctx.out);
}

typedef struct Selfplay__ctx_type_21 {
   Selfplay__ctx_type_19 _inst9cc;
   Selfplay__ctx_type_18 _inst8b2;
   Selfplay__ctx_type_19 _inst7cc;
   Selfplay__ctx_type_18 _inst6b2;
   Selfplay__ctx_type_18 _inst5b2;
   Selfplay__ctx_type_19 _inst4cc;
   Selfplay__ctx_type_17 _inst338;
   Selfplay__ctx_type_17 _inst238;
   Selfplay__ctx_type_20 _inst13e5;
   Selfplay__ctx_type_17 _inst138;
   Selfplay__ctx_type_18 _inst12b2;
   Selfplay__ctx_type_19 _inst11cc;
   Selfplay__ctx_type_18 _inst10b2;
} Selfplay__ctx_type_21;

typedef Selfplay__ctx_type_21 Selfplay_process_type;

void Selfplay__ctx_type_21_init(Selfplay__ctx_type_21 &_output_);

static_inline void Selfplay_process_init(Selfplay__ctx_type_21 &_output_){
   Selfplay__ctx_type_21_init(_output_);
   return ;
}

float Selfplay_process(Selfplay__ctx_type_21 &_ctx, float input);

typedef Selfplay__ctx_type_21 Selfplay_noteOn_type;

static_inline void Selfplay_noteOn_init(Selfplay__ctx_type_21 &_output_){
   Selfplay__ctx_type_21_init(_output_);
   return ;
}

static_inline void Selfplay_noteOn(Selfplay__ctx_type_21 &_ctx, int note, int velocity, int channel){
}

typedef Selfplay__ctx_type_21 Selfplay_noteOff_type;

static_inline void Selfplay_noteOff_init(Selfplay__ctx_type_21 &_output_){
   Selfplay__ctx_type_21_init(_output_);
   return ;
}

static_inline void Selfplay_noteOff(Selfplay__ctx_type_21 &_ctx, int note, int channel){
}

typedef Selfplay__ctx_type_21 Selfplay_controlChange_type;

static_inline void Selfplay_controlChange_init(Selfplay__ctx_type_21 &_output_){
   Selfplay__ctx_type_21_init(_output_);
   return ;
}

static_inline void Selfplay_controlChange(Selfplay__ctx_type_21 &_ctx, int control, int value, int channel){
}

typedef Selfplay__ctx_type_21 Selfplay_default_type;

static_inline void Selfplay_default_init(Selfplay__ctx_type_21 &_output_){
   Selfplay__ctx_type_21_init(_output_);
   return ;
}

static_inline void Selfplay_default(Selfplay__ctx_type_21 &_ctx){
}



#endif // VULTGEN_H
